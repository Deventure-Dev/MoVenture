// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoCodeFirst.Data;

namespace MoCodeFirst.Migrations
{
    [DbContext(typeof(Entities))]
    [Migration("20190527095936_auth")]
    partial class auth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new { Id = "1", Name = "Admin", NormalizedName = "ADMIN" },
                        new { Id = "2", Name = "Customer", NormalizedName = "CUSTOMER" }
                    );
                });

            modelBuilder.Entity("MoCodeFirst.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("SavedAt");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MoCodeFirst.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<DateTime>("SavedAt");

                    b.Property<Guid>("Savedby");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MoCodeFirst.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentMessage");

                    b.Property<DateTime>("SavedAt");

                    b.Property<Guid?>("SavedAtMovieId");

                    b.Property<Guid?>("SavedByNavigationId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("SavedAtMovieId");

                    b.HasIndex("SavedByNavigationId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MoCodeFirst.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CategoryId");

                    b.Property<DateTime>("LaunchDate");

                    b.Property<string>("PictureUrl");

                    b.Property<double>("Rating");

                    b.Property<int>("RatingCount");

                    b.Property<DateTime>("SavedAt");

                    b.Property<Guid?>("SavedById");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<string>("TrailerUrl");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SavedById");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MoCodeFirst.Models.MovieActorIntermediate", b =>
                {
                    b.Property<Guid>("ActorId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieActorIntermediate");
                });

            modelBuilder.Entity("MoCodeFirst.Models.MoviePlaylistIntermediate", b =>
                {
                    b.Property<Guid>("PlaylistId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("PlaylistId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MoviePlaylistIntermediate");
                });

            modelBuilder.Entity("MoCodeFirst.Models.MovieTagIntermediate", b =>
                {
                    b.Property<Guid>("TagId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("TagId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieTagIntermediate");
                });

            modelBuilder.Entity("MoCodeFirst.Models.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<DateTime>("SavedAt");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MoCodeFirst.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<DateTime>("SavedAt");

                    b.Property<Guid?>("SavedById");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("SavedById");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MoCodeFirst.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<DateTime>("SavedAt");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MoCodeFirst.Models.Comment", b =>
                {
                    b.HasOne("MoCodeFirst.Models.Movie", "SavedAtMovie")
                        .WithMany()
                        .HasForeignKey("SavedAtMovieId");

                    b.HasOne("MoCodeFirst.Models.User", "SavedByNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("SavedByNavigationId");
                });

            modelBuilder.Entity("MoCodeFirst.Models.Movie", b =>
                {
                    b.HasOne("MoCodeFirst.Models.Category", "Category")
                        .WithMany("MovieList")
                        .HasForeignKey("CategoryId");

                    b.HasOne("MoCodeFirst.Models.User", "SavedBy")
                        .WithMany("MovieList")
                        .HasForeignKey("SavedById");
                });

            modelBuilder.Entity("MoCodeFirst.Models.MovieActorIntermediate", b =>
                {
                    b.HasOne("MoCodeFirst.Models.Actor", "Actor")
                        .WithMany("MovieList")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoCodeFirst.Models.Movie", "Movie")
                        .WithMany("ActorList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoCodeFirst.Models.MoviePlaylistIntermediate", b =>
                {
                    b.HasOne("MoCodeFirst.Models.Movie", "Movie")
                        .WithMany("PlaylistList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoCodeFirst.Models.Playlist", "Playlist")
                        .WithMany("MovieList")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoCodeFirst.Models.MovieTagIntermediate", b =>
                {
                    b.HasOne("MoCodeFirst.Models.Movie", "Movie")
                        .WithMany("TagList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoCodeFirst.Models.Tag", "Tag")
                        .WithMany("MovieList")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoCodeFirst.Models.Playlist", b =>
                {
                    b.HasOne("MoCodeFirst.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MoCodeFirst.Models.Tag", b =>
                {
                    b.HasOne("MoCodeFirst.Models.User", "SavedBy")
                        .WithMany()
                        .HasForeignKey("SavedById");
                });
#pragma warning restore 612, 618
        }
    }
}
