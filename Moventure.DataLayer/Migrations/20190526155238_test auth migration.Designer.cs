// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Moventure.DataLayer.Models;

namespace Moventure.DataLayer.Migrations
{
    [DbContext(typeof(Entities))]
    [Migration("20190526155238_test auth migration")]
    partial class testauthmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", Name = "Admin", NormalizedName = "ADMIN" },
                        new { Id = "2", Name = "Customer", NormalizedName = "CUSTOMER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.ActorMovieAssignments", b =>
                {
                    b.Property<Guid>("ActorId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovieAssignments");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Actors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(255);

                    b.Property<DateTime>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Categories", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("SavedAt");

                    b.Property<Guid>("Savedby");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CommentMessage")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<Guid>("MovieId");

                    b.Property<DateTime>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("SavedBy");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("SavedBy");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Movies", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("CategoryId");

                    b.Property<DateTime>("LaunchDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnName("PictureURL")
                        .HasMaxLength(250);

                    b.Property<double>("Rating");

                    b.Property<int>("RatingCount");

                    b.Property<DateTime>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("SavedBy");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TrailerUrl")
                        .HasColumnName("TrailerURL")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.PlaylistMovieAssignments", b =>
                {
                    b.Property<Guid>("PlaylistId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("PlaylistId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("PlaylistMovieAssignments");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Playlists", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Tags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("SavedBy");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.TagsMovieAssignments", b =>
                {
                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("CategoryId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("TagsMovieAssignments");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.UserMovieAssignments", b =>
                {
                    b.Property<Guid>("MovieId");

                    b.Property<Guid>("UserId");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMovieAssignments");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.ActorMovieAssignments", b =>
                {
                    b.HasOne("Moventure.DataLayer.Models.Actors", "Actor")
                        .WithMany("ActorMovieAssignments")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("FK_ActorMovieAssignments_Actor");

                    b.HasOne("Moventure.DataLayer.Models.Movies", "Movie")
                        .WithMany("ActorMovieAssignments")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_ActorMovieAssignments_Movie");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Comments", b =>
                {
                    b.HasOne("Moventure.DataLayer.Models.Users", "SavedByNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("SavedBy")
                        .HasConstraintName("FK_Comment_Movie");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Movies", b =>
                {
                    b.HasOne("Moventure.DataLayer.Models.Categories", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Movies_Category");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.PlaylistMovieAssignments", b =>
                {
                    b.HasOne("Moventure.DataLayer.Models.Movies", "Movie")
                        .WithMany("PlaylistMovieAssignments")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_PlaylistMovieAssignments_Movies");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.Playlists", b =>
                {
                    b.HasOne("Moventure.DataLayer.Models.Users", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Playlists_User");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.TagsMovieAssignments", b =>
                {
                    b.HasOne("Moventure.DataLayer.Models.Tags", "Category")
                        .WithMany("TagsMovieAssignments")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CategoryMovieAssignments_Category");

                    b.HasOne("Moventure.DataLayer.Models.Movies", "Movie")
                        .WithMany("TagsMovieAssignments")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_CategoryMovieAssignments_Movie");
                });

            modelBuilder.Entity("Moventure.DataLayer.Models.UserMovieAssignments", b =>
                {
                    b.HasOne("Moventure.DataLayer.Models.Movies", "Movie")
                        .WithMany("UserMovieAssignments")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_UserMovieAssignments_UserMovieAssignments");

                    b.HasOne("Moventure.DataLayer.Models.Users", "User")
                        .WithMany("UserMovieAssignments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserMovieAssignments_User");
                });
#pragma warning restore 612, 618
        }
    }
}
